@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<BaseBullet>
 }


class HeroAircraft {
    - shootNum:int
    - power:int
    - direction:int
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + {static} getInstance() : HeroAircraft
    + forward():void
    + shoot():List<BaseBullet>
}

AbstractAircraft <|-- HeroAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}
AbstractAircraft <|-- MobEnemy

class EliteEnemy{
    - shootNum :int
    - power: int 
    - direction: int
    - prop_kind : int
    - propFactory : PropFactory
    - prop : BaseProp
    - {static} random: Random 
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward() : void
    + shoot():List<BaseBullet>
    + generate_prop() : BaseProp

}
AbstractAircraft <|--EliteEnemy

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet

abstract class BaseProp
{
    + BaseProp(int locationX, int locationY, int speedX, int speedY) 
    + forward(): void
	+ {abstract} work(HeroAircraft hero): void
}

class BloodProp {
    - add_blood :int
    +  BloodProp(int locationX, int locationY, int speedX, int speedY)
    + get_AddBlood(): int 
    + work(HeroAircraft hero): void
}
class BombProp {
    + BombProp(int locationX, int locationY, int speedX, int speedY)
    + work(HeroAircraft hero): void
}

class BulletProp {
    + BulletProp(int locationX, int locationY, int speedX, int speedY)
    + work(HeroAircraft hero): void
}

BaseProp <|-- BloodProp
BaseProp <|-- BombProp
BaseProp <|-- BulletProp

AbstractFlyingObject <|-- BaseProp




interface EnemyFactory{
    + {abstract} createEnemy() : AbstractAircraft
}

class MobFactory{
    + createEnemy(): MobEnemy
}
class EliteFactory{
    + createEnemy(): EliteEnemy
}

EnemyFactory <|.. MobFactory
EnemyFactory <|.. EliteFactory

MobFactory ..> MobEnemy
EliteFactory ..> EliteEnemy


interface PropFactory{
    + {abstract} createProp(int locationX, int locationY, int speedX, int speedY) : BaseProp
}

class BulletFactory{
    + createProp(int locationX, int locationY, int speedX, int speedY) : BulletProp
}

class BombFactory{
    + createProp(int locationX, int locationY, int speedX, int speedY) : BombProp
}
class BloodFactory{
    + createProp(int locationX, int locationY, int speedX, int speedY) : BloodProp
}

PropFactory <|.. BombFactory
PropFactory <|.. BulletFactory
PropFactory <|.. BloodFactory


BombFactory ..> BombProp
BulletFactory ..> BulletProp
BloodFactory ..> BloodProp

EliteEnemy ..> PropFactory
EliteEnemy ..> Random

HeroAircraft ..> HeroAircraft
@enduml